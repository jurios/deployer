<?php


namespace Kodilab\Deployer\Tests\Unit\Git\Diff\Entries;


use Kodilab\Deployer\Changes\Add;
use Kodilab\Deployer\Changes\ChangeList;
use Kodilab\Deployer\Changes\Modify;
use Kodilab\Deployer\Configuration\Configuration;
use Kodilab\Deployer\Exceptions\ChangeIncoherenceException;
use Kodilab\Deployer\Tests\TestCase;

class ChangeListTest extends TestCase
{
    /**
     * @var ChangeList
     */
    protected $collection;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->collection = new ChangeList(new Configuration(require __DIR__ .'/../../../config/config.php'));
    }

    public function test_add_entry_should_throw_an_exception_if_already_an_entry_exists_with_the_same_path()
    {
        $this->expectException(ChangeIncoherenceException::class);

        $entry = new Add($this->faker->name);
        $entry2 = new Modify($entry->getPath());

        $this->collection->add($entry);
        $this->collection->add($entry2);
    }

    public function test_add_ignored_entry_should_not_be_added_in_the_changes_list()
    {
        $changeList = new ChangeList(new Configuration(['ignore' => ['a/*'], 'manager' => ['protocol' => 'simulate']]));

        $add = new Add('a/b');

        $changeList->add($add);

        $this->assertTrue($changeList->getChanges()->where('path', $add->getPath())->isEmpty());
        $this->assertEquals($add, $changeList->getIgnored()->where('path', $add->getPath())->first());
    }
}
