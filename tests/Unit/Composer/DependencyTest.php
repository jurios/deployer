<?php


namespace Kodilab\Deployer\Tests\Unit\Composer;


use Kodilab\Deployer\ComposerLock\Dependency;
use Kodilab\Deployer\Exceptions\InvalidComposerLockFileException;
use Kodilab\Deployer\Tests\TestCase;

class DependencyTest extends TestCase
{
    /**
     * @var Dependency
     */
    protected $dependency;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->dependency = new Dependency($this->loadMockComposerLock()['packages'][0]);
    }

    public function test_should_returns_dependency_name()
    {
        $dep = new Dependency($this->dependency->toArray());

        $this->assertEquals($this->dependency->name, $dep->name);
    }

    public function test_should_throw_an_exception_if_the_name_does_not_exist()
    {
        $this->expectException(InvalidComposerLockFileException::class);

        new Dependency([]);
    }

    public function test_dependency_name_should_have_a_publisher_and_a_package_name()
    {
        $this->expectException(InvalidComposerLockFileException::class);

        $raw = $this->dependency->toArray();
        $raw['name'] = $this->faker->word;

        new Dependency($raw);
    }

    public function test_dependency_name_with_hyphens_should_not_throw_an_exception()
    {
        $raw = $this->dependency->toArray();
        $raw['name'] = $this->faker->word . '-' . $this->faker->word .
                        DIRECTORY_SEPARATOR .
                        $this->faker->word . '-' . $this->faker->word;

        $this->assertEquals(Dependency::class, get_class(new Dependency($raw)));
    }

    public function test_getPublisher_should_return_the_dependency_scope()
    {
        $this->assertEquals('laravel', $this->dependency->getPublisher());
    }

    public function test_getReference_shouldreturn_the_dist_reference_field()
    {
        $this->assertEquals('47bb1471b727a0c1497143dccf46aacf73c0ce6b', $this->dependency->getReference());
    }
}
